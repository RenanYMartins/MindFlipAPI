// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  topics    Topic[]
  Actions   Action[]
}

model Topic {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  color       String        @db.Char(6)
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topicId     Int?
  parentTopic Topic?        @relation(name: "TopicToSubtopic", fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subTopics   Topic[]       @relation(name: "TopicToSubtopic")
  flashcards  Flashcard[]
  TopicReview TopicReview[]
  TopicAction TopicAction[]
}

model Flashcard {
  id              Int               @id @default(autoincrement())
  question        String            @db.Text
  response        String            @db.Text
  createdAt       DateTime          @default(now())
  topicId         Int
  topic           Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  FlashcardAction FlashcardAction[]
}

model TopicReview {
  id              Int               @id @default(autoincrement())
  topicId         Int
  rating          Int
  total           Int
  date            DateTime          @default(now())
  topic           Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  flashcardReview FlashcardReview[]
}

model FlashcardReview {
  id          Int         @id @default(autoincrement())
  rating      Int
  date        DateTime    @default(now())
  flashcardId Int
  flashcard   TopicReview @relation(fields: [flashcardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Action {
  id              Int               @id @default(autoincrement())
  method          String
  userId          Int
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createAt        DateTime          @default(now())
  FlashcardAction FlashcardAction[]
  TopicAction     TopicAction[]
}

model FlashcardAction {
  id          Int       @id @default(autoincrement())
  flashcardId Int
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actionId    Int
  action      Action    @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model TopicAction {
  id       Int    @id @default(autoincrement())
  topicId  Int
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actionId Int
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
